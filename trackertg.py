import datetime
import json
import telebot
from telebot import types


data_file = 'time_tracking_data.json'
file = open('./mytocken.txt')
mytocken = file.read()
bot = telebot.TeleBot(mytocken)


def load_data():
    try: 
        with open(data_file, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return []
    
def save_data(data):
    with open(data_file, 'w') as file:
        return json.dump(data, file, indent=4)


def add_activities(activity, start_time, end_time):
    data = load_data()
    data.append({
        'activity': activity,
        'start_time': start_time.strftime('%Y-%m-%d %H:%M'),
        'end_time': end_time.strftime('%Y-%m-%d %H:%M'),
        'date': start_time.strftime('%Y-%m-%d'),
        'duration': str(end_time - start_time)
    }) 
    save_data(data)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å')
    button2 = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∞')
    button3 = types.KeyboardButton('–í—ã—Ö–æ–¥')
    markup.row(button1,button2)
    markup.row(button3)

    if message.text == '/start':
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üëã\n–Ø —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–π.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª —Ç–µ–±—è –æ–±—Ä–∞—Ç–Ω–æ", reply_markup=markup)
        bot.send_message(message.chat.id, "üëã", reply_markup=markup)

@bot.message_handler(commands=['add_activity'])
def request_activity_data(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, YYYY-MM-DD HH:MM, YYYY-MM-DD HH:MM")
    bot.register_next_step_handler(msg, process_activity_input)


def process_activity_input(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        parts = [part.strip() for part in message.text.split(',', maxsplit=2)]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if len(parts) == 3:
            activity = parts[0]
            start_time = datetime.datetime.strptime(parts[1], '%Y-%m-%d %H:%M')
            end_time = datetime.datetime.strptime(parts[2], '%Y-%m-%d %H:%M')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if start_time >= end_time:
                bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.')
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            add_activities(activity, start_time, end_time)
            bot.send_message(message.chat.id, '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    except Exception:
        bot.reply_to(message, '–û—à–∏–±–∫–∞')


def request_date(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å üìÖ")
    bot.register_next_step_handler(msg, show_activities)

def show_activities(message):
    date_requested = message.text.strip()
    data = load_data()
    act_for_day = [activity for activity in data if 'date' in activity and activity['date'] == date_requested]

    if not act_for_day:
        bot.send_message(message.chat.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å((')
        return
    
    response = f'üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å {date_requested}:\n'
    for i, activity in enumerate(act_for_day, 1):
        response += f"{i}. {activity['activity']} von {activity['start_time']} bis {activity['end_time']}\n"
    bot.send_message(message.chat.id, response)


@bot.message_handler()
def tracker(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        request_activity_data(message)
    elif message.text == '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∞':
        request_date(message)
    elif message.text == '–í—ã—Ö–æ–¥':
        start(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å')


bot.polling(none_stop=True)
